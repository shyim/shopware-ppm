#!/usr/bin/env bash
set -o nounset
set -o errexit
set -o pipefail

# Subject to change
SW_VERSION="5.4.0"
SW_VERSION_TEXT="dev"
SW_REVISION=${RANDOM}${RANDOM}

declare no_symlinks='on'

# Linux/Mac abstraction
function get_realpath(){
    [[ ! -f "$1" ]] && return 1 # failure : file does not exist.
    [[ -n "$no_symlinks" ]] && local pwdp='pwd -P' || local pwdp='pwd' # do symlinks.
    echo "$( cd "$( echo "${1%/*}" )" 2>/dev/null; $pwdp )"/"${1##*/}" # echo result.
    return 0
}

# Set magic variables for current FILE & DIR
declare -r __FILE__=$(get_realpath ${BASH_SOURCE[0]})
declare -r __DIR__=$(dirname $__FILE__)

function printError(){
    >&2 echo -e "$@"
}

function promptYesOrNo(){
    declare prompt="$1"
    declare default=${2:-""}

    while true
        do
            read -p "$prompt" answer
                case $(echo "$answer" | `which awk` '{print tolower($0)}') in
                    y|yes)
                        echo 'y'
                        break
                        ;;
                    n|no)
                        echo 'n'
                        break
                        ;;
                    *)
                        if [ -z "$answer" ] && [ ! -z "$default" ] ; then
                            echo "$default"
                            break
                        fi
                        printError "Please enter y or n!"
                        ;;
        esac
    done
}

function swCommand(){
    ${__DIR__}/../bin/console "$@"
}

function banner(){
    echo -e -n $'\e[34m\e[1'
    echo -e | cat ${__DIR__}/banner.txt
    echo -e $'\e[0m'
}

function envFileDoesNotExists(){
    [ ! -f ${__DIR__}/../.env ]
    return $?
}

function createEnvFile(){

    echo -e "\n--------------------------"
    echo -e "Database settings"
    echo -e "--------------------------\n"

    read -p "Enter your database host (default: 127.0.0.1): " DB_HOST
    DB_HOST=${DB_HOST:-"127.0.0.1"}

    read -p "Enter your database name (default: swcomposer): " DB_DATABASE
    DB_DATABASE=${DB_DATABASE:-swcomposer}

    read -p "Enter your database username (default: shopware): " DB_USERNAME
    DB_USERNAME=${DB_USERNAME:-shopware}

    read -p "Enter your database password (default: shopware): " DB_PASSWORD
    DB_PASSWORD=${DB_PASSWORD//\"/\\\":-shopware}

    read -p "Enter your database port number (default: 3306): " DB_PORT
    DB_PORT=${DB_PORT:-"3306"}

    echo -e "\n--------------------------"
    echo -e "Admin settings"
    echo -e "--------------------------\n"

    read -p "Admin username (default: demo): " ADMIN_USERNAME
    ADMIN_USERNAME=${ADMIN_USERNAME:-demo}

    read -p "Admin password (default: demo): " ADMIN_PASSWORD
    ADMIN_PASSWORD=${ADMIN_PASSWORD:-demo}

    read -p "Admin name (default: John Doe): " ADMIN_NAME
    ADMIN_NAME=${ADMIN_NAME:-"John Doe"}

    read -p "Admin email (default: demo@demo.com): " ADMIN_EMAIL
    ADMIN_EMAIL=${ADMIN_EMAIL:-"demo@demo.com"}

    echo -e "\n--------------------------"
    echo -e "Shop settings"
    echo -e "--------------------------\n"

    read -p "Enter your shop URL incl. protocol and path (default: http://shopware.example/path): " SHOP_URL
    SHOP_URL=${SHOP_URL:-http://shopware.example/path}

    IMPORT_DEMODATA=$(promptYesOrNo "Would you like to install demo data? (Y/n) " 'y')

    echo -e "# This file was generated by the shopware composer shell installer\n" > ${__DIR__}/../.env
    echo -e "# Shop environment and database connection" >> ${__DIR__}/../.env
    echo -e "SHOPWARE_ENV=\"dev\"" >> ${__DIR__}/../.env
    echo -e "SHOPWARE_VERSION=\"${SW_VERSION}\"" >> ${__DIR__}/../.env
    echo -e "SHOPWARE_VERSION_TEXT=\"${SW_VERSION_TEXT}\"" >> ${__DIR__}/../.env
    echo -e "SHOPWARE_REVISION=\"${SW_REVISION}\"" >> ${__DIR__}/../.env

    echo -e "\n# The URL has priority over the other values, so only one parameter needs to be set in production environments" >> ${__DIR__}/../.env
    echo -e "DATABASE_URL=\"mysql://${DB_USERNAME}:${DB_PASSWORD}@${DB_HOST}:${DB_PORT}/${DB_DATABASE}\"\n" >> ${__DIR__}/../.env

    echo -e "# If e.g. the password contains special chars not allowed in a URL, you can define each parameter by itself instead" >> ${__DIR__}/../.env
    echo -e "DB_HOST=\"${DB_HOST}\"" >> ${__DIR__}/../.env
    echo -e "DB_DATABASE=\"${DB_DATABASE}\"" >> ${__DIR__}/../.env
    echo -e "DB_USERNAME=\"${DB_USERNAME}\"" >> ${__DIR__}/../.env
    echo -e "DB_PASSWORD=\"${DB_PASSWORD}\"" >> ${__DIR__}/../.env
    echo -e "DB_PORT=\"${DB_PORT}\"" >> ${__DIR__}/../.env

    echo -e "\n# Installation configuration (can be removed after installation)" >> ${__DIR__}/../.env
    echo -e "ADMIN_EMAIL=\"$ADMIN_EMAIL\"" >> ${__DIR__}/../.env
    echo -e "ADMIN_NAME=\"$ADMIN_NAME\"" >> ${__DIR__}/../.env
    echo -e "ADMIN_USERNAME=\"$ADMIN_USERNAME\"" >> ${__DIR__}/../.env
    echo -e "ADMIN_PASSWORD=\"$ADMIN_PASSWORD\"" >> ${__DIR__}/../.env
    echo -e "SHOP_URL=\"$SHOP_URL\"\n" >>  ${__DIR__}/../.env
    echo -e "IMPORT_DEMODATA=$IMPORT_DEMODATA" >> ${__DIR__}/../.env
}

function loadEnvFile(){
    if [ -f $__DIR__/../.env ]; then
        echo -e "\033[1;34mLoading configuration settings from .env file\033[0m"
        source $__DIR__/../.env
        return
    fi
    echo "Could not load .env file"
    exit 1
}

function createEnvFileInteractive(){
    declare correct=0;

    while [[ ${correct} != 'y' ]]
        do
            createEnvFile
            echo -e "\n----------------------------------------------------------"
            echo -e "The following settings have been written to the .env file:"
            echo -e "----------------------------------------------------------\n"
            cat ${__DIR__}/../.env
            echo -e "----------------------------------------------------------------\n"
            correct=$(promptYesOrNo "Is this information correct? (Y/n) " 'y')
    done
}

function createSymLinks(){
    echo "Creating symlinks in $__DIR__"
    cd $__DIR__/..
    rm -rf  engine/Library
    mkdir -p engine/Library
    ln -s ../../vendor/shopware/shopware/engine/Library/CodeMirror engine/Library/CodeMirror
    ln -s ../../vendor/shopware/shopware/engine/Library/ExtJs engine/Library/ExtJs
    ln -s ../../vendor/shopware/shopware/engine/Library/TinyMce engine/Library/TinyMce

    rm -rf themes/Frontend/{Bare,Responsive}
    rm -rf themes/Backend/ExtJs

    mkdir -p themes/{Frontend,Backend}

    ln -s ../../vendor/shopware/shopware/themes/Backend/ExtJs themes/Backend/ExtJs
    ln -s ../../vendor/shopware/shopware/themes/Frontend/Bare themes/Frontend/Bare
    ln -s ../../vendor/shopware/shopware/themes/Frontend/Responsive themes/Frontend/Responsive
}

